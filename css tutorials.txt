HTML Entities( &pounds,&copywrites)
Semantic Tags (Header,footer,article,aside,section,navbar)
CSS Selectors (id, class, element , group)
Box-Model (Box-sizing=Border-box)
Universal Starik( * ) property apply on all
float and clear() overflow:auto
display: Block margin:auto width:setting 
inline-blocking and box-sizing
absolute relative sticky fixed static(default)
relatives: top left right position use kar sakte   relatives to move from their positions; but gap their previous position
absolute means: we will move from parent 
sticky: space fill nai karti jab ka fixed ap ka gap fill kar deti ha
visibility (hidden,  space reserved, not hide space) display: none means not take space dont space reserved also hide the space
Z-index :  used when position static only work on position relative absolute fixed

FLEXBOX : Design for layout One dimensional Layout  row columns change according to their environment
flex properties for container>>  flex-direction:row;by default    flex-direction:column flex-wrap:wrap
flex-flow: 1st direction and next wrap 2 thing place in one line

justify-content:center   justify-content:space-between and space-evenly and space-around (horizontal center)
align-items:center , flex-end(neechey ajae ga)  flex-start; stretch (vertically evely space)                                                                 (vertical center)

order:30   anf flex-grow:3;  3 guniah zeda jab moka mile ga  negative number invalid     flex-shrink:3   chota kare ga
flex-basis:400px;  when flex-directio row so consider width also when responsive

flex: grow shrink basis:
flex:2 2 300px;
align-self:center / flex-star /flex-end

using rem/vh/vw  max-width/max-height 
10 em 10 gunnah parent ka when use according to resize your parent so automatically child size changes
10 rem  according to base html size  when use depend on page relatively like default size sa move karna


CSS more selectors div>p  direct access  div p: dont direct access ,  div+p  means p ka pele div hona chaie

nth child: li:nth-child(3) and nth-child(2n+0) and nth-child(3n+0) nth-child(even)
Psudo Selectors input[target] input[type="text"]


text-align:center;  rem: 
vh : 100  means pori height la la or vw for width la la


Before and After Pseudo Selector
header::before{
content="";
position:absolute;
top:0;
left:0;
width:100%;
height:100%;
z-index:-1;
opacity:0.3;

}

box shadow text shadow

custom variabls
--box-color:green;
used so background-color:var(--box-color); var lazmi lagana  automatically changes all
mostly declare in :root{
--box-color:green;
}

ANIMATION:
.items{
  animation-name:muawa;
  animation-duration:2s;
  animation-iteration-count:3;
  animation-fill-mode:alternate;
  animation-timing-function:ease-in-out;
  animation:delay;
  animation-direction:alternative;/reverse/

  animation: muawa 2s ease-in 1s 12 backwords;
}
@keyframes muawa
{
    from{
      width:200px;
    }
    to{
      width:500px;
    }
}
@keyframes muawa1
{
   0%{
  top:0px;
  left:10px;
   }
   25%{
       top:10px;
  left:20px;
   }
   50%{

   }
}


opacity 

Transition used for hover when cursor point it otherwise animation automatically start when referesh

#items{
  transition-property:background-color;
  transition-duration:2s;
  transition-timing-function:ease-in;//ease-out, ease-in-out
  transition-delay:2s;
  // in one line
  transition:background-color 1s ease-in-out 3s;
  // if all property transition
  transition: all 1s ease-in 3s;
}
#box:hover{
  background-color:white;
}

TRANSFORM
.items{
  transform:rotate(45deg);
  transform:skew((40deg);
  transform:translateX(123px);
  transform:translate(120px);
}


  .container{
   
    display:grid;
    grid-template-columns: 100px 200px 100px; //1fr 2fr //1fr
    grid-template-columns:repeat(10,auto);
    grid-template-rows:1fr 2fr 1fr;
    grid-auto-rows:2fr;
    grid-gap:2rem;
  }
.container:first-child{
    grid-column-start:1;
    grid-column-end:3;
  }
 grid-column:1 / span 3
    grid-template-columns: repeat(auto-fit,minmax(400px,1fr));

























pixabay
